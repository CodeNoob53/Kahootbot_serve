// –û–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª render-server.js
const express = require('express')
const cors = require('cors')
const { createProxyMiddleware } = require('http-proxy-middleware')
const { HttpsProxyAgent } = require('https-proxy-agent')
const WebSocket = require('ws')
const http = require('http')
const https = require('https')
const url = require('url')

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
try {
  const dotenv = require('dotenv')
  dotenv.config()
  console.log('dotenv —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ')
} catch (error) {
  console.log(
    'dotenv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'
  )
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
const PROXY_CONFIG = {
  host: process.env.PROXY_HOST || '',
  port: process.env.PROXY_PORT || '',
  auth: {
    username: process.env.PROXY_USERNAME || '',
    password: process.env.PROXY_PASSWORD || ''
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó UUID
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = (Math.random() * 16) | 0
    const v = c === 'x' ? r : (r & 0x3) | 0x8
    return v.toString(16)
  })
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ User-Agent
function getRandomUserAgent() {
  const userAgents = [
    // –ú–æ–±—ñ–ª—å–Ω—ñ User-Agent (–º–µ–Ω—à –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ)
    'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Mobile/15E148 Safari/604.1',
    'Mozilla/5.0 (iPad; CPU OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Mobile/15E148 Safari/604.1',
    'Mozilla/5.0 (Linux; Android 10; SM-G981B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36',
    // –î–µ—Å–∫—Ç–æ–ø–Ω—ñ User-Agent
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Safari/605.1.15',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36'
  ]
  
  return userAgents[Math.floor(Math.random() * userAgents.length)]
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó cookies –¥–ª—è –∑–∞–ø–∏—Ç—É
function generateKahootCookies() {
  const uuid = crypto.randomUUID?.() || generateUUID();
  const now = new Date();
  const nowIsoStr = now.toISOString();
  const consentId = generateUUID();
  const dateStr = encodeURIComponent(now.toUTCString());

  return [
    `generated_uuid=${uuid}`,
    `OptanonAlertBoxClosed=${nowIsoStr}`,
    `OptanonConsent=isGpcEnabled=0&datestamp=${dateStr}&version=202411.1.0&browserGpcFlag=0&isIABGlobal=false&hosts=&consentId=${consentId}&interactionCount=1&isAnonUser=1&landingPath=NotLandingPage&groups=C0001%3A1%2CC0002%3A0%2CC0003%3A0%2CC0004%3A0&intType=3`,
    `deviceId=${uuid.replace(/-/g, '')}`,
    `AWSALB=${Math.random().toString(36).substring(2)}`,
    `session-id=${Math.random().toString(36).substring(2)}`,
    `player=true`
  ];
}


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTPS –∞–≥–µ–Ω—Ç–∞ –∑ –ø—Ä–æ–∫—Å—ñ
function createProxyAgent() {
  if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
    console.log('–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.')
    return null
  }

  const authStr =
    PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
      ? `${PROXY_CONFIG.auth.username}:${PROXY_CONFIG.auth.password}`
      : ''

  const proxyUrl = authStr
    ? `http://${authStr}@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`
    : `http://${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`

  console.log('üîí –ü–æ–±—É–¥–æ–≤–∞–Ω–∏–π –ø—Ä–æ–∫—Å—ñ URL:', proxyUrl)

  try {
    return new HttpsProxyAgent(proxyUrl)
  } catch (e) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞:', e.message)
    return null
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è HTTPS –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∫—Å—ñ
let httpsAgent = null
try {
  httpsAgent = createProxyAgent()
} catch (error) {
  console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç–∞:', error)
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Express –¥–æ–¥–∞—Ç–∫—É
const app = express()
app.use(
  cors({
    origin: '*',
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
  })
)
app.use(express.json())

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} | ${req.method} ${req.url}`)
  next()
})

// --- CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ ---
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*')
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  next()
})

// –û–±—Ä–æ–±–∫–∞ CORS preflight –∑–∞–ø–∏—Ç—ñ–≤
app.options('*', (req, res) => {
  res.header('Access-Control-Allow-Origin', '*')
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  res.sendStatus(200)
})

// --- –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–æ–º ---
app.post('/set-proxy', (req, res) => {
  try {
    const { host, port, username, password } = req.body

    if (!host || !port) {
      return res.status(400).json({
        error: 'Bad Request',
        message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ host —ñ port'
      })
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–æ–∫—Å—ñ
    PROXY_CONFIG.host = host
    PROXY_CONFIG.port = port
    PROXY_CONFIG.auth.username = username || ''
    PROXY_CONFIG.auth.password = password || ''

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    try {
      httpsAgent = createProxyAgent()

      if (httpsAgent === null) {
        console.log(
          '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ, –∞–ª–µ –∞–≥–µ–Ω—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ.'
        )
      }

      console.log(`–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${host}:${port}`)

      return res.json({
        success: true,
        message: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
        proxyConfig: {
          host: PROXY_CONFIG.host,
          port: PROXY_CONFIG.port,
          hasAuth: Boolean(
            PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
          )
        }
      })
    } catch (proxyError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç–∞:', proxyError)
      return res.status(500).json({
        error: 'Proxy Agent Error',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç: ' + proxyError.message
      })
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–∫—Å—ñ:', error)
    return res.status(500).json({
      error: 'Internal Server Error',
      message: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–∫—Å—ñ: ' + error.message
    })
  }
})

app.get('/proxy-info', (req, res) => {
  return res.json({
    host: PROXY_CONFIG.host,
    port: PROXY_CONFIG.port,
    hasAuth: Boolean(PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password)
  })
})

// --- –ë–∞–∑–æ–≤–∏–π —Ä–æ—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞ ---
app.get('/', (req, res) => {
  res.json({
    status: 'Server is running',
    proxyConfigured: Boolean(PROXY_CONFIG.host && PROXY_CONFIG.port),
    proxyInfo:
      PROXY_CONFIG.host && PROXY_CONFIG.port
        ? `${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`
        : 'Not configured',
    hasAuth: Boolean(PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password),
    timestamp: new Date().toISOString(),
    agentInitialized: httpsAgent !== null
  })
})

// --- –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞ ---
app.get('/health', (req, res) => {
  res.status(200).send('OK')
})

app.get('/proxy-status', (req, res) => {
  res.header('Access-Control-Allow-Origin', '*')

  try {
    return res.json({
      status: 'ok',
      proxyConfigured: Boolean(PROXY_CONFIG.host && PROXY_CONFIG.port),
      proxyConfig: {
        host: PROXY_CONFIG.host,
        port: PROXY_CONFIG.port,
        hasAuth: Boolean(
          PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
        )
      },
      agentInitialized: httpsAgent !== null,
      serverTime: new Date().toISOString()
    })
  } catch (e) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤ /proxy-status:', e)
    return res.status(500).json({
      status: 'error',
      message: e.message
    })
  }
})

// –í render-server.js –¥–æ–¥–∞–π—Ç–µ —Ü–µ–π –æ–Ω–æ–≤–ª–µ–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–∫—Å—ñ
app.get('/test-proxy', async (req, res) => {
  res.header('Access-Control-Allow-Origin', '*')

  try {
    if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
      console.log('–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ')
      return res.status(400).json({
        success: false,
        message: '–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'
      })
    }

    console.log("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ-–∑'—î–¥–Ω–∞–Ω–Ω—è...")

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    const testUrl = 'https://kahoot.it/'

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTP-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∫—Å—ñ
    const authStr =
      PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
        ? `${PROXY_CONFIG.auth.username}:${PROXY_CONFIG.auth.password}`
        : ''

    const proxyUrl = authStr
      ? `http://${authStr}@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`
      : `http://${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`

    console.log(`–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ: ${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`)

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ cookies
    const testCookies = generateKahootCookies()

    // –í–∏–∫–æ–Ω—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ
    const testResponse = await new Promise((resolve, reject) => {
      const httpsAgent = new HttpsProxyAgent(proxyUrl)

      const req = https.request(
        testUrl,
        {
          agent: httpsAgent,
          method: 'HEAD',
          headers: {
            'User-Agent': getRandomUserAgent(),
            'Cookie': testCookies.join('; '),
            'Accept-Language': 'en-US,en;q=0.9',
            'Cache-Control': 'no-cache'
          }
        },
        resp => {
          resolve({
            statusCode: resp.statusCode,
            headers: resp.headers
          })
        }
      )

      req.on('error', error => {
        reject(error)
      })

      req.setTimeout(5000, () => {
        req.destroy(new Error('Timeout connecting to target server'))
      })

      req.end()
    })

    console.log(
      `–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ: —Å—Ç–∞—Ç—É—Å ${testResponse.statusCode}`
    )

    if (testResponse.statusCode >= 200 && testResponse.statusCode < 300) {
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PIN
      const testPin = '1234567' // –¢–µ—Å—Ç–æ–≤–∏–π PIN

      try {
        const kahootResponse = await new Promise((resolve, reject) => {
          const httpsAgent = new HttpsProxyAgent(proxyUrl)

          const req = https.request(
            `https://kahoot.it/reserve/session/${testPin}/`,
            {
              agent: httpsAgent,
              method: 'GET',
              headers: {
                'User-Agent': getRandomUserAgent(),
                'Origin': 'https://kahoot.it',
                'Referer': 'https://kahoot.it/',
                'Accept-Language': 'en-US,en;q=0.9',
                'Cache-Control': 'no-cache',
                'Cookie': testCookies.join('; ')
              }
            },
            resp => {
              let data = ''
              resp.on('data', chunk => {
                data += chunk
              })
              resp.on('end', () => {
                resolve({
                  statusCode: resp.statusCode,
                  data
                })
              })
            }
          )

          req.on('error', error => {
            reject(error)
          })

          req.setTimeout(5000, () => {
            req.destroy(new Error('Timeout connecting to Kahoot API'))
          })

          req.end()
        })

        console.log(`Kahoot API —Ç–µ—Å—Ç: —Å—Ç–∞—Ç—É—Å ${kahootResponse.statusCode}`)

        const kahootProxyWorking = kahootResponse.statusCode !== 403 // 404 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ü–µ –±–æ –ø—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î

        if (kahootProxyWorking) {
          return res.json({
            success: true,
            message: '–ü—Ä–æ–∫—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —Ç–∞ –ø—Ä–∞—Ü—é—î –∑ Kahoot API',
            config: {
              host: PROXY_CONFIG.host,
              port: PROXY_CONFIG.port,
              hasAuth: Boolean(
                PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
              )
            },
            kahootTest: {
              success: true,
              statusCode: kahootResponse.statusCode
            },
            timestamp: new Date().toISOString()
          })
        } else {
          return res.json({
            success: true,
            warning: true,
            message:
              '–ü—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—î, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ Kahoot API. –ú–æ–∂–ª–∏–≤–æ, –ø—Ä–æ–∫—Å—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —Å–µ—Ä–≤—ñ—Å–æ–º Kahoot.',
            config: {
              host: PROXY_CONFIG.host,
              port: PROXY_CONFIG.port,
              hasAuth: Boolean(
                PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
              )
            },
            kahootTest: {
              success: false,
              statusCode: kahootResponse.statusCode
            },
            timestamp: new Date().toISOString()
          })
        }
      } catch (kahootError) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É Kahoot API:', kahootError)

        // –û—Å–Ω–æ–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å, –∞–ª–µ Kahoot API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
        return res.json({
          success: true,
          warning: true,
          message:
            '–ü—Ä–æ–∫—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ Kahoot API',
          error: kahootError.message,
          config: {
            host: PROXY_CONFIG.host,
            port: PROXY_CONFIG.port,
            hasAuth: Boolean(
              PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
            )
          },
          timestamp: new Date().toISOString()
        })
      }
    } else {
      // –ü—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—î, –∞–ª–µ –≤–∏–¥–∞—î –ø–æ–º–∏–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∑–∞–ø–∏—Ç—ñ
      return res.status(400).json({
        success: false,
        message: `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ: –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞—Ç—É—Å ${testResponse.statusCode}`,
        config: {
          host: PROXY_CONFIG.host,
          port: PROXY_CONFIG.port,
          hasAuth: Boolean(
            PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
          )
        },
        timestamp: new Date().toISOString()
      })
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ:', error)

    return res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ',
      error: error.message,
      config: {
        host: PROXY_CONFIG.host,
        port: PROXY_CONFIG.port,
        hasAuth: Boolean(
          PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
        )
      },
      timestamp: new Date().toISOString()
    })
  }
})

app.get('/test-cookies', (req, res) => {
  try {
    const cookies = generateKahootCookies();

    res.json({
      success: true,
      message: '–°—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ –∫—É–∫–∏ –¥–ª—è –µ–º—É–ª—è—Ü—ñ—ó –±—Ä–∞—É–∑–µ—Ä–∞',
      cookies
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó cookies',
      error: error.message
    });
  }
});


// --- KAHOOT API ENDPOINTS ---

// !!! –í–ê–ñ–õ–ò–í–û: –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è challenge-—Ç–æ–∫–µ–Ω—É
// –ü–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–∏–π –ü–ï–†–ï–î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å—ñ –¥–ª—è /kahoot-api
// –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è challenge-—Ç–æ–∫–µ–Ω—É
app.post('/kahoot-api/solve-challenge', (req, res) => {
  try {
    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è challenge-—Ç–æ–∫–µ–Ω—É')
    const { challenge } = req.body

    if (!challenge) {
      return res.status(400).json({
        error: 'Bad Request',
        message: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π challenge —Ç–æ–∫–µ–Ω'
      })
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∞–∂–ª–∏–≤–∏—Ö —á–∞—Å—Ç–∏–Ω challenge –¥–ª—è –¥–µ–±–∞–≥—É
    const logChallengeParts = challenge => {
      console.log('--- Challenge Debug Info ---')
      // –í–∏–¥–æ–±—É–≤–∞—î–º–æ —Ä—ñ–∑–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
      const decodeFn = challenge.match(
        /function decode\([^)]*\)\s*\{([\s\S]*?)\}/
      )
      const offsetCalc = challenge.match(/var offset\s*=\s*([^;]+);/)

      console.log('Decode function exists:', Boolean(decodeFn))
      console.log('Offset calculation exists:', Boolean(offsetCalc))

      if (offsetCalc) {
        console.log('Raw offset formula:', offsetCalc[1].trim())
      }

      // –®—É–∫–∞—î–º–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const encodedMsg = challenge.match(/decode\.call\(this,\s*'([^']+)'/)
      console.log('Encoded message exists:', Boolean(encodedMsg))
      if (encodedMsg) {
        console.log('Encoded message length:', encodedMsg[1].length)
        console.log(
          'Encoded message preview:',
          encodedMsg[1].substring(0, 20) + '...'
        )
      }

      console.log('------------------------')
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    logChallengeParts(challenge)

    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–∫–ª–∏–∫—É decode.call
    let encodedMessage
    try {
      // –û–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—à—É–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const msgMatch = challenge.match(/decode\.call\(this,\s*'([^']+)'/)
      if (!msgMatch) {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–æ—à—É–∫—É
        const altMatch1 = challenge.match(/decode\s*\(\s*'([^']+)'\s*\)/)
        const altMatch2 = challenge.match(/decode\s*\(\s*"([^"]+)"\s*\)/)

        if (altMatch1) {
          encodedMessage = altMatch1[1]
        } else if (altMatch2) {
          encodedMessage = altMatch2[1]
        } else {
          throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
        }
      } else {
        encodedMessage = msgMatch[1]
      }
    } catch (matchError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–∫–æ–¥–æ–≤–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', matchError)
      return res.status(400).json({
        error: 'Invalid Challenge',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ challenge'
      })
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è offset
    let offsetFormula
    try {
      // –û–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É offset
      const offsetMatch = challenge.match(/var\s+offset\s*=\s*([^;]+);/)
      if (!offsetMatch) {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–æ—à—É–∫—É
        const altMatch = challenge.match(/offset\s*=\s*([^;]+);/)
        if (altMatch) {
          offsetFormula = altMatch[1]
        } else {
          // –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –∑–Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º—É–ª—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–ø–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
          console.log(
            '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º—É–ª—É offset, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–ø–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è'
          )
          offsetFormula = '18150' // –û–Ω–æ–≤–ª–µ–Ω–µ —Ç–∏–ø–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        }
      } else {
        offsetFormula = offsetMatch[1]
      }
    } catch (matchError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ä–º—É–ª–∏ offset:', matchError)
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–ø–∞—Å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
      offsetFormula = '18150'
    }

    // –û–±—á–∏—Å–ª—é—î–º–æ offset
    let offset = 0
    try {
      // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É–ª—É –≤—ñ–¥ –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
      const cleanFormula = offsetFormula
        .replace(/\s+/g, '') // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–±—ñ–ª—ñ–≤
        .replace(/\t/g, '') // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±—É–ª—è—Ü—ñ–π
        .replace(/this\.angular\.isArray|this\.angular\.isObject/g, 'false') // –ó–∞–º—ñ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–π
        .replace(/console\.log\([^)]+\)/g, '') // –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–∫–ª–∏–∫—ñ–≤ console.log
        .replace(/window\./g, '') // –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ window
        .replace(/document\./g, '') // –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ document
        .replace(/localStorage|sessionStorage/g, '{}') // –ë–µ–∑–ø–µ—á–Ω–∞ –∑–∞–º—ñ–Ω–∞
        .replace(/eval|Function/g, '') // –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π

      console.log('–û—á–∏—â–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ offset:', cleanFormula)

      // –ë–µ–∑–ø–µ—á–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –ø–æ —á–∞—Å—É
      let evaluated = false
      const evalTimeout = setTimeout(() => {
        if (!evaluated) {
          console.log(
            'Timeout –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ offset, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–ø–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è'
          )
          offset = 18150 // –û–Ω–æ–≤–ª–µ–Ω–µ —Ç–∏–ø–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
          evaluated = true
        }
      }, 1000)

      // –ü—Ä–æ–±—É—î–º–æ –æ–±—á–∏—Å–ª–∏—Ç–∏
      try {
        offset = eval(cleanFormula)
        evaluated = true
        clearTimeout(evalTimeout)
        console.log('–û–±—á–∏—Å–ª–µ–Ω–∏–π offset:', offset)
      } catch (evalInnerError) {
        if (!evaluated) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: ' + evalInnerError)
          offset = 18150
          evaluated = true
          clearTimeout(evalTimeout)
        }
      }
    } catch (evalError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è offset:', evalError)

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ –ø—Ä–∞—Ü—é–≤–∞–ª–æ –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑
      offset = 18150
      console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–ø–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è offset:', offset)
    }

    // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    function decodeMessage(message, offset) {
      if (!message || typeof message !== 'string') {
        console.error('Invalid message for decoding', message)
        return ''
      }

      try {
        let result = ''
        for (let position = 0; position < message.length; position++) {
          const char = message.charAt(position)
          const charCode = char.charCodeAt(0)

          // –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –∑ Kahoot challenge
          let newCharCode = Math.floor(
            ((charCode * (position + 1) + offset) % 77) + 48
          )

          // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–ø–∞—Å–Ω–∏–π
          if (
            isNaN(newCharCode) ||
            !isFinite(newCharCode) ||
            newCharCode < 32 ||
            newCharCode > 126
          ) {
            newCharCode = 88 // ASCII –∫–æ–¥ –¥–ª—è 'X'
          }

          result += String.fromCharCode(newCharCode)
        }
        return result
      } catch (error) {
        console.error('Error in decodeMessage:', error)
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Ç–æ–∫–µ–Ω —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        return 'BACKUP_TOKEN_' + Date.now()
      }
    }

    // –°–ø—Ä–æ–±–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –∑ –æ–±—á–∏—Å–ª–µ–Ω–∏–º offset
    let decodedToken = decodeMessage(encodedMessage, offset)
    console.log('–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω:', decodedToken)

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—É (–±–∞–∑–æ–≤–∞)
    if (!decodedToken || decodedToken.length < 10) {
      // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à—ñ –∑–Ω–∞—á–µ–Ω–Ω—è offset
      console.log('–¢–æ–∫–µ–Ω –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–¥—ñ–π—Å–Ω–∏–º, –ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ offset')

      // –ú–∞—Å–∏–≤ —Ç–∏–ø–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å offset, —è–∫—ñ —á–∞—Å—Ç–æ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è
      const alternativeOffsets = [
        18150, // –ó–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ —Ä–∞–Ω—ñ—à–µ
        16050,
        17150,
        19200,
        20250
      ]

      for (const altOffset of alternativeOffsets) {
        if (altOffset === offset) continue // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π offset

        const altToken = decodeMessage(encodedMessage, altOffset)
        console.log(`–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–æ–∫–µ–Ω (offset=${altOffset}):`, altToken)

        // –Ø–∫—â–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–æ–∫–µ–Ω –≤–∏–≥–ª—è–¥–∞—î –∫—Ä–∞—â–∏–º
        if (altToken && altToken.length > 10 && /[A-Za-z0-9]/.test(altToken)) {
          decodedToken = altToken
          console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–æ–∫–µ–Ω')
          break
        }
      }
    }

    return res.json({
      success: true,
      token: decodedToken,
      offset: offset,
      originalLength: encodedMessage.length,
      decodedLength: decodedToken.length
    })
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ challenge:', error)
    return res.status(500).json({
      error: 'Internal Server Error',
      message: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ challenge: ' + error.message
    })
  }
})


// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—ñ—ó –∑ Kahoot
app.get('/kahoot-api/reserve/session/:pin', async (req, res) => {
  try {
    const { pin } = req.params

    if (!pin || !/^\d{6,10}$/.test(pin)) {
      return res.status(400).json({
        error: 'Invalid PIN',
        message: 'PIN –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 6 –¥–æ 10 —Ü–∏—Ñ—Ä'
      })
    }

    if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
      return res.status(503).json({
        error: 'Proxy Not Configured',
        message: '–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø—Ä–æ–∫—Å—ñ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Kahoot'
      })
    }

    if (!httpsAgent) {
      return res.status(503).json({
        error: 'Service Unavailable',
        message:
          '–ü—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä.'
      })
    }

    console.log(`–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É —Å–µ—Å—ñ—ó –¥–ª—è PIN: ${pin}`)

    const kahootUrl = `https://kahoot.it/reserve/session/${pin}/`
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ cookies –¥–ª—è –∑–∞–ø–∏—Ç—É
    const kahootCookies = generateKahootCookies()

    const response = await new Promise((resolve, reject) => {
      const req = https.request(
        kahootUrl,
        {
          method: 'GET',
          agent: httpsAgent,
          headers: {
            'User-Agent': getRandomUserAgent(),
            'Origin': 'https://kahoot.it',
            'Referer': 'https://kahoot.it/',
            'Accept-Language': 'en-US,en;q=0.9,uk;q=0.8',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Cookie': kahootCookies.join('; ')
          }
        },
        resp => {
          let data = ''
          resp.on('data', chunk => {
            data += chunk
          })
          resp.on('end', () => {
            if (resp.statusCode >= 200 && resp.statusCode < 300) {
              try {
                const parsed = JSON.parse(data)
                resolve(parsed)
              } catch (e) {
                console.error('JSON parse error:', e.message)
                reject({
                  statusCode: 502,
                  message: `–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${e.message}`
                })
              }
            } else {
              console.warn(
                `Kahoot –≤—ñ–¥–ø–æ–≤—ñ–≤ —Å—Ç–∞—Ç—É—Å–æ–º ${resp.statusCode}: ${resp.statusMessage}`
              )
              reject({
                statusCode: resp.statusCode,
                message: resp.statusMessage
              })
            }
          })
        }
      )

      req.on('error', error => {
        reject({ statusCode: 502, message: error.message })
      })

      req.end()
    })

    console.log(`–û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–∫–µ–Ω —Å–µ—Å—ñ—ó –¥–ª—è PIN ${pin}`)
    return res.json(response)
  } catch (error) {
    const status = error.statusCode || 500
    console.error(
      `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É —Å–µ—Å—ñ—ó (HTTP ${status}): ${error.message}`
    )
    return res.status(status).json({
      error: 'Session Token Error',
      message: error.message
    })
  }
})

// !!! –í–ê–ñ–õ–ò–í–û: –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–∫—Å—ñ –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Kahoot API –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º
// –ü—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
app.use('/kahoot-api', (req, res, next) => {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–æ–∫—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
  if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
    return res.status(503).json({
      error: 'Service Unavailable',
      message:
        '–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –ø—Ä–æ–∫—Å—ñ —á–µ—Ä–µ–∑ API /set-proxy'
    })
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π httpsAgent
  if (!httpsAgent) {
    return res.status(503).json({
      error: 'Service Unavailable',
      message: '–ü—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä.'
    })
  }

  // –í—Å—ñ –∑–∞–ø–∏—Ç–∏, –∫—Ä—ñ–º —Ç–∏—Ö, —â–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞–º–∏, –±—É–¥—É—Ç—å –ø—Ä–æ–∫—Å—ñ—é–≤–∞—Ç–∏—Å—è
  const proxyMiddleware = createProxyMiddleware({
    target: 'https://kahoot.it',
    changeOrigin: true,
    pathRewrite: {
      '^/kahoot-api': ''
    },
    agent: httpsAgent,
    onProxyReq: (proxyReq, req) => {
      console.log(`Proxying request to: ${req.method} ${req.path}`)
    },
    onProxyRes: proxyRes => {
      proxyRes.headers['Access-Control-Allow-Origin'] = '*'
      proxyRes.headers['Access-Control-Allow-Methods'] =
        'GET, POST, PUT, DELETE, OPTIONS'
      proxyRes.headers['Access-Control-Allow-Headers'] =
        'Origin, X-Requested-With, Content-Type, Accept, Authorization'
    },
    onError: (err, req, res) => {
      console.error('Proxy error:', err)
      res.status(500).json({ error: 'Proxy Error', message: err.message })
    }
  })

  return proxyMiddleware(req, res, next)
})

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function setupUserActivitySimulation(ws, clientId) {
  let heartbeatInterval = null
  let activityInterval = null
  
  // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î
  if (heartbeatInterval) clearInterval(heartbeatInterval)
  if (activityInterval) clearInterval(activityInterval)
  
  // –°–∏–º—É–ª—è—Ü—ñ—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏—Ö ping/pong –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
  heartbeatInterval = setInterval(() => {
    if (!clientId) return
    
    try {
      if (ws.readyState === WebSocket.OPEN) {
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ping
        const pingMsg = [{
          id: Date.now().toString(),
          channel: '/meta/connect',
          connectionType: 'websocket',
          clientId: clientId,
          advice: {
            timeout: 0
          }
        }]
        
        ws.send(JSON.stringify(pingMsg))
        console.log('Sent keepalive ping')
      }
    } catch (error) {
      console.error('Error sending keepalive:', error)
    }
  }, 25000) // –ö–æ–∂–Ω—ñ 25 —Å–µ–∫—É–Ω–¥
  
  // –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  activityInterval = setInterval(() => {
    if (!clientId) return
    
    try {
      if (ws.readyState === WebSocket.OPEN) {
        // –í–∏–ø–∞–¥–∫–æ–≤–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        if (Math.random() < 0.5) {
          // –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ä—É—Ö—É –º–∏—à—ñ –∞–±–æ —ñ–Ω—à–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
          const activityMsg = [{
            id: Date.now().toString(),
            channel: '/service/controller',
            data: {
              type: 'ping',
              latency: Math.floor(Math.random() * 100) + 20
            },
            clientId: clientId
          }]
          
          ws.send(JSON.stringify(activityMsg))
          console.log('Sent user activity simulation')
        }
      }
    } catch (error) {
      console.error('Error sending activity simulation:', error)
    }
  }, 8000 + Math.floor(Math.random() * 7000)) // –ö–æ–∂–Ω—ñ 8-15 —Å–µ–∫—É–Ω–¥ –∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
  
  // –û—á–∏—â–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
  ws.on('close', () => {
    if (heartbeatInterval) clearInterval(heartbeatInterval)
    if (activityInterval) clearInterval(activityInterval)
    console.log('Cleared activity intervals on connection close')
  })
  
  return { heartbeatInterval, activityInterval }
}

// --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø WEBSOCKET –ü–†–û–ö–°–Ü ---
const server = http.createServer(app)
const wsServer = new WebSocket.Server({ noServer: true })

// –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è WebSocket
server.on('upgrade', (request, socket, head) => {
  const pathname = url.parse(request.url).pathname

  if (pathname.startsWith('/kahoot-ws')) {
    wsServer.handleUpgrade(request, socket, head, ws => {
      wsServer.emit('connection', ws, request)
    })
  } else {
    socket.destroy()
  }
})

// –û–±—Ä–æ–±–∫–∞ WebSocket –∑'—î–¥–Ω–∞–Ω—å
wsServer.on('connection', (ws, request) => {
  if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
    console.error('WebSocket connection attempt, but proxy is not configured')
    ws.send(
      JSON.stringify({
        error: 'Proxy not configured',
        message: 'Please configure proxy via /set-proxy API first'
      })
    )
    ws.close()
    return
  }

  if (!httpsAgent) {
    console.error(
      'WebSocket connection attempt, but proxy agent is not initialized'
    )
    ws.send(
      JSON.stringify({
        error: 'Proxy agent not initialized',
        message: 'Please restart the server'
      })
    )
    ws.close()
    return
  }

  // –û–±—Ä–æ–±–∫–∞ URL –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const parsedUrl = url.parse(request.url, true)
  const pathParts = parsedUrl.pathname.split('/')
  const queryParams = parsedUrl.query || {}

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è cookies –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —è–∫—â–æ —î
  let cookiesFromUrl = ''
  if (queryParams.cookies) {
    cookiesFromUrl = decodeURIComponent(queryParams.cookies)
    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ cookies –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤')
  }

  // –í–∏–¥–∞–ª—è—î–º–æ '/kahoot-ws' –∑ –ø–æ—á–∞—Ç–∫—É —à–ª—è—Ö—É
  if (pathParts[1] === 'kahoot-ws') {
    pathParts.splice(1, 1)
  }

  // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ URL
  let pin = ''
  let sessionToken = ''
  let challengeToken = ''

  // –ü–∞—Ä—Å–∏–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ URL
  // –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏: /kahoot-ws/cometd/{pin}/{sessionToken}/{challengeToken?}
  if (pathParts.length >= 4) {
    pin = pathParts[2]
    sessionToken = pathParts[3]

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å challenge-—Ç–æ–∫–µ–Ω—É
    if (pathParts.length >= 5) {
      challengeToken = pathParts[4]
      console.log(
        `–û—Ç—Ä–∏–º–∞–Ω–æ challenge-—Ç–æ–∫–µ–Ω –∑ URL: ${challengeToken.substring(0, 20)}...`
      )
    }
  }

  if (!pin || !sessionToken) {
    console.error('Invalid WebSocket URL format: missing pin or session token')
    ws.send(
      JSON.stringify({
        error: 'Invalid URL',
        message: 'URL must contain game pin and session token'
      })
    )
    ws.close()
    return
  }

  console.log(
    `WebSocket connection for pin: ${pin}, session: ${sessionToken.substring(
      0,
      10
    )}...`
  )

  // –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
  let isConnectionEstablished = false
  let clientHandshakeReceived = false
  let clientId = null
  let retryAttempted = false

  try {
    // –§–æ—Ä–º—É—î–º–æ WebSocket URL –¥–ª—è Kahoot
    const kahootWsUrl = `wss://kahoot.it/cometd/${pin}/${sessionToken}`

    console.log(`Connecting to Kahoot WebSocket: ${kahootWsUrl}`)

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Kahoot
    const wsOptions = {
      agent: httpsAgent,
      headers: {
        'User-Agent': getRandomUserAgent(),
        'Origin': 'https://kahoot.it',
        'Referer': `https://kahoot.it/join?gameId=${pin}`,
        'Host': 'kahoot.it',
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Sec-WebSocket-Extensions': 'permessage-deflate; client_max_window_bits'
      }
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ cookies –∑ URL, —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ
    if (cookiesFromUrl) {
      wsOptions.headers['Cookie'] = cookiesFromUrl
      console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ cookies –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤')
    } else {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ cookies
      const kahootCookies = generateKahootCookies()
      wsOptions.headers['Cookie'] = kahootCookies.join('; ')
      console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ cookies')
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ Kahoot
    const kahootWs = new WebSocket(kahootWsUrl, wsOptions)

    // –û–±—Ä–æ–±–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    kahootWs.on('open', () => {
      console.log('Successfully connected to Kahoot WebSocket')
      isConnectionEstablished = true
    })

    // –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ Kahoot –∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
    ws.on('message', message => {
      try {
        if (kahootWs.readyState === WebSocket.OPEN) {
          // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä—è–¥–æ–∫
          const msgStr = message.toString()

          // –ü–∞—Ä—Å–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
          let msgObject
          try {
            msgObject = JSON.parse(msgStr)
          } catch (parseError) {
            // –Ø–∫—â–æ –Ω–µ –º–æ–∂–Ω–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —è–∫ —î
            console.log(
              `WS Client ‚Üí Kahoot: Raw message (${msgStr.length} bytes)`
            )
            kahootWs.send(message)
            return
          }

          // –Ø–∫—â–æ —Ü–µ –º–∞—Å–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
          if (Array.isArray(msgObject)) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ handshake
            if (
              msgObject.length > 0 &&
              msgObject[0].channel === '/meta/handshake'
            ) {
              clientHandshakeReceived = true
              console.log('Handshake message detected, –º–æ–¥–∏—Ñ—ñ–∫—É—î–º–æ –¥–ª—è Kahoot')
              
              // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ handshake –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
              const handshakeMsg = {
                id: Date.now().toString(),
                version: '1.0',
                minimumVersion: '1.0',
                channel: '/meta/handshake',
                supportedConnectionTypes: ['websocket', 'long-polling'],
                advice: {
                  timeout: 60000,
                  interval: 0
                },
                ext: {
                  ack: true,
                  timesync: {
                    tc: Date.now(),
                    l: 0,
                    o: 0
                  }
                }
              }
              
              // –î–æ–¥–∞—î–º–æ challenge-—Ç–æ–∫–µ–Ω –¥–æ handshake –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω —î
              if (challengeToken) {
                handshakeMsg.ext.challenge = challengeToken
                console.log(`Added challenge token to handshake: ${challengeToken.substring(0, 20)}...`)
              }
              
              // –ó–∞–º—ñ–Ω—è—î–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –º–∞—Å–∏–≤—ñ –ø–æ–≤–Ω—ñ—Å—Ç—é
              msgObject[0] = handshakeMsg

              // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–∑–∞–¥ —É —Ä—è–¥–æ–∫
              const modifiedMsg = JSON.stringify(msgObject)
              console.log(
                `WS Client ‚Üí Kahoot: –ü–æ–≤–Ω—ñ—Å—Ç—é —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–æ–≤–∞–Ω–µ handshake –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (${modifiedMsg.length} bytes)`
              )
              kahootWs.send(modifiedMsg)
              return
            }
            
            // –Ø–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è subscribe, –¥–æ–¥–∞—î–º–æ clientId
            if (msgObject.length > 0 && msgObject[0].channel === '/meta/subscribe') {
              console.log('Subscribe message detected, –¥–æ–¥–∞—î–º–æ clientId —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ')
              
              // –î–æ–¥–∞—î–º–æ clientId, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
              if (!msgObject[0].clientId && clientId) {
                msgObject[0].clientId = clientId
                console.log(`Added clientId to subscribe message: ${clientId}`)
              }
              
              const modifiedMsg = JSON.stringify(msgObject)
              console.log(`WS Client ‚Üí Kahoot: Modified subscribe message (${modifiedMsg.length} bytes)`)
              kahootWs.send(modifiedMsg)
              return
            }
          }

          // –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
          console.log(`WS Client ‚Üí Kahoot: Message (${msgStr.length} bytes)`)
          kahootWs.send(message)
        }
      } catch (error) {
        console.error('Error processing client message:', error)
        // –°–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ–π
        if (kahootWs.readyState === WebSocket.OPEN) {
          kahootWs.send(message)
        }
      }
    })

    // –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ Kahoot –¥–æ –∫–ª—ñ—î–Ω—Ç–∞
    kahootWs.on('message', message => {
      try {
        if (ws.readyState === WebSocket.OPEN) {
          const msgStr = message.toString()

          // –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
          try {
            const msgObject = JSON.parse(msgStr)
            // –Ø–∫—â–æ —Ü–µ handshake –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ clientId
            if (
              Array.isArray(msgObject) &&
              msgObject.length > 0 &&
              msgObject[0].channel === '/meta/handshake'
            ) {
              console.log('Received handshake response from Kahoot')
              
              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
              if (msgObject[0].successful) {
                clientId = msgObject[0].clientId
                console.log('Handshake successful, –æ—Ç—Ä–∏–º–∞–Ω–æ clientId:', clientId)
                
                // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–º—É–ª—è—Ü—ñ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                setupUserActivitySimulation(ws, clientId)
              } else {
                console.error(
                  'Handshake failed:',
                  msgObject[0].error || 'Unknown error'
                )
              }
            }
            
            // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ advice –∑ reconnect=none, —Ü–µ –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
            if (Array.isArray(msgObject) && msgObject.length > 0 && 
                msgObject[0].advice && msgObject[0].advice.reconnect === 'none') {
              console.log('Kahoot advice reconnect=none, –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–±–æ —Å–µ—Å—ñ—è –∑–∞–∫—Ä–∏—Ç–∞')
            }
          } catch (e) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
          }

          // –õ–æ–≥—É—î–º–æ —Å–∫–æ—Ä–æ—á–µ–Ω—É –≤–µ—Ä—Å—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è –≤ –ª–æ–≥–∞—Ö
          const shortMsg = msgStr.length > 200 ? msgStr.substring(0, 200) + '...' : msgStr;
          console.log(`WS Kahoot ‚Üí Client: Message (${msgStr.length} bytes): ${shortMsg}`)
          
          // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É –±–µ–∑ –∑–º—ñ–Ω
          ws.send(message)
        }
      } catch (error) {
        console.error('Error sending message to client:', error)
      }
    })

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω—å –ø—Ä–∏ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—ñ –æ–¥–Ω–æ–≥–æ –∑ –Ω–∏—Ö
    ws.on('close', (code, reason) => {
      console.log(
        `Client WebSocket closed. Code: ${code}, Reason: ${reason || 'None'}`
      )
      if (
        kahootWs.readyState === WebSocket.OPEN ||
        kahootWs.readyState === WebSocket.CONNECTING
      ) {
        kahootWs.close()
      }
    })

    kahootWs.on('close', (code, reason) => {
      console.log(
        `Kahoot WebSocket closed. Code: ${code}, Reason: ${reason || 'None'}`
      )
      if (
        ws.readyState === WebSocket.OPEN ||
        ws.readyState === WebSocket.CONNECTING
      ) {
        ws.close()
      }
    })

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    ws.on('error', error => {
      console.error('Client WebSocket error:', error)
    })

    kahootWs.on('error', error => {
      console.error('Kahoot WebSocket error:', error)

      try {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(
            JSON.stringify({
              error: 'Kahoot connection error',
              message: error.message || 'Unexpected server error'
            })
          )
        }
      } catch (e) {
        console.error('Error sending error message to client:', e)
      }

      if (
        ws.readyState === WebSocket.OPEN ||
        ws.readyState === WebSocket.CONNECTING
      ) {
        ws.close()
      }
    })

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
    kahootWs.on('unexpected-response', (request, response) => {
      console.error(
        `Unexpected response from Kahoot: ${response.statusCode} ${response.statusMessage}`
      )
      console.log('Response headers:', response.headers)

      // –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      let body = ''
      response.on('data', chunk => {
        body += chunk
      })
      response.on('end', () => {
        console.log('Response body:', body.substring(0, 1000))

        try {
          if (ws.readyState === WebSocket.OPEN) {
            ws.send(
              JSON.stringify({
                error: 'Kahoot connection rejected',
                status: response.statusCode,
                message: `Server rejected connection: ${response.statusCode} ${response.statusMessage}`
              })
            )
          }
        } catch (e) {
          console.error('Error sending error message to client:', e)
        }

        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ 403, —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ —á–µ—Ä–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ
        if (response.statusCode === 403 && !retryAttempted) {
          retryAttempted = true
          console.log('Received 403, –ø—Ä–æ–±—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –∑ —ñ–Ω—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...')
          
          // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Kahoot
          if (kahootWs.readyState === WebSocket.OPEN || kahootWs.readyState === WebSocket.CONNECTING) {
            kahootWs.close()
          }
          
          try {
            // –ù–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –º–æ–±—ñ–ª—å–Ω–∏–º User-Agent
            const newWsOptions = {
              agent: httpsAgent,
              headers: {
                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Mobile/15E148 Safari/604.1',
                'Origin': 'https://kahoot.it',
                'Referer': `https://kahoot.it/join?gameId=${pin}`,
                'Host': 'kahoot.it',
                'Accept-Language': 'en-US,en;q=0.9',
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache',
                'Sec-WebSocket-Extensions': 'permessage-deflate; client_max_window_bits'
              }
            }
            
            // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ cookies
            const newKahootCookies = generateKahootCookies()
            newWsOptions.headers['Cookie'] = newKahootCookies.join('; ')
            
            console.log('Trying to connect without challenge token with mobile user agent...')
            const newKahootWs = new WebSocket(kahootWsUrl, newWsOptions)
            
            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è (–¥–æ–¥–∞–π—Ç–µ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏)
            newKahootWs.on('open', () => {
              console.log('Successfully connected on retry with mobile user agent!')
              isConnectionEstablished = true
              
              // –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
              if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({
                  info: 'Reconnected',
                  message: 'Successfully reconnected to Kahoot after 403 error'
                }))
              }
            })
            
            // –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –∑'—î–¥–Ω–∞–Ω–Ω—é
          } catch (retryError) {
            console.error('Error in retry connection attempt:', retryError)
            
            if (ws.readyState === WebSocket.OPEN) {
              ws.send(JSON.stringify({
                error: 'Retry failed',
                message: 'Failed to reconnect after 403 error: ' + retryError.message
              }))
              ws.close()
            }
          }
        } else {
          if (
            ws.readyState === WebSocket.OPEN ||
            ws.readyState === WebSocket.CONNECTING
          ) {
            ws.close()
          }
        }
      })
    })

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    const connectionTimeout = setTimeout(() => {
      if (!isConnectionEstablished) {
        console.error('Connection timeout to Kahoot WebSocket')

        try {
          if (ws.readyState === WebSocket.OPEN) {
            ws.send(
              JSON.stringify({
                error: 'Connection timeout',
                message: 'Failed to establish connection to Kahoot server'
              })
            )
          }
        } catch (e) {
          console.error('Error sending timeout message to client:', e)
        }

        if (
          ws.readyState === WebSocket.OPEN ||
          ws.readyState === WebSocket.CONNECTING
        ) {
          ws.close()
        }

        if (
          kahootWs.readyState === WebSocket.OPEN ||
          kahootWs.readyState === WebSocket.CONNECTING
        ) {
          kahootWs.close()
        }
      }
    }, 15000) // –ó–±—ñ–ª—å—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥

    // –°–∫–∞—Å–æ–≤—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
    kahootWs.on('open', () => {
      clearTimeout(connectionTimeout)
    })
  } catch (error) {
    console.error('Error creating WebSocket connection to Kahoot:', error)

    try {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(
          JSON.stringify({
            error: 'WebSocket Error',
            message: error.message
          })
        )
      }
    } catch (e) {
      console.error('Error sending error message to client:', e)
    }

    if (
      ws.readyState === WebSocket.OPEN ||
      ws.readyState === WebSocket.CONNECTING
    ) {
      ws.close()
    }
  }
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000
server.listen(PORT, () => {
  console.log(`Proxy server running on port ${PORT}`)
  if (PROXY_CONFIG.host && PROXY_CONFIG.port) {
    console.log(`Using proxy: ${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`)
    if (PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password) {
      console.log('Proxy authentication configured')
    } else {
      console.log('No proxy authentication configured')
    }
  } else {
    console.log('No proxy configured. Please set proxy using /set-proxy API')
  }
})