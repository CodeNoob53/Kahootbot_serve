// –ü—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥—É –æ–±–º–µ–∂–µ–Ω—å CORS –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ Kahoot API
// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞ Render.com
const express = require('express');
const cors = require('cors');
const { createProxyMiddleware } = require('http-proxy-middleware');
// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç HttpsProxyAgent
const { HttpsProxyAgent } = require('https-proxy-agent');
const WebSocket = require('ws');
const http = require('http');
const url = require('url');
const fs = require('fs');
const path = require('path');

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
try {
  const dotenv = require('dotenv');
  dotenv.config();
  console.log('dotenv —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
} catch (error) {
  console.log('dotenv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º');
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É .env —è–∫—â–æ –≤—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏)
try {
  const envPath = path.join(__dirname, '.env');
  if (!fs.existsSync(envPath)) {
    console.log('Creating .env file with sample configuration');
    const sampleEnv = `# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–∞
# –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ –∑–∞–º—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
PROXY_HOST=
PROXY_PORT=
PROXY_USERNAME=
PROXY_PASSWORD=

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
PORT=3000
`;
    fs.writeFileSync(envPath, sampleEnv);
  }
} catch (error) {
  console.warn('Error creating .env file:', error.message);
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
const PROXY_CONFIG = {
  host: process.env.PROXY_HOST || '',
  port: process.env.PROXY_PORT || '',
  auth: {
    username: process.env.PROXY_USERNAME || '',
    password: process.env.PROXY_PASSWORD || ''
  }
};

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Express –¥–æ–¥–∞—Ç–∫—É
const app = express();
app.use(cors({
  origin: '*', // –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
app.use(express.json());

// –ü—Ä–æ—Å—Ç–∏–π –º—ñ–¥–ª–≤–∞—Ä –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} | ${req.method} ${req.url}`);
  next();
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTPS –∞–≥–µ–Ω—Ç–∞ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –ø—Ä–æ–∫—Å—ñ
function createProxyAgent() {
  if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
    console.log('–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.');
    return null;
  }

  const authStr = PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password
    ? `${PROXY_CONFIG.auth.username}:${PROXY_CONFIG.auth.password}`
    : '';

  const proxyUrl = authStr
    ? `http://${authStr}@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`
    : `http://${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`;

  console.log('üîí –ü–æ–±—É–¥–æ–≤–∞–Ω–∏–π –ø—Ä–æ–∫—Å—ñ URL:', proxyUrl);

  try {
    // üü¢ –û—Å—å –∫–ª—é—á: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "new"
    return HttpsProxyAgent(proxyUrl);
  } catch (e) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞:', e.message);
    return null;
  }
}


// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è HTTPS –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∫—Å—ñ
let httpsAgent = null;
try {
  httpsAgent = createProxyAgent();
} catch (error) {
  console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç–∞:', error);
}

// API –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–∫—Å—ñ
app.post('/set-proxy', (req, res) => {
  try {
    const { host, port, username, password } = req.body;
    
    if (!host || !port) {
      return res.status(400).json({ 
        error: 'Bad Request', 
        message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ host —ñ port' 
      });
    }
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–æ–∫—Å—ñ
    PROXY_CONFIG.host = host;
    PROXY_CONFIG.port = port;
    PROXY_CONFIG.auth.username = username || '';
    PROXY_CONFIG.auth.password = password || '';
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    try {
      httpsAgent = createProxyAgent();
      
      if (httpsAgent === null) {
        // –ê–≥–µ–Ω—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
        console.log('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ, –∞–ª–µ –∞–≥–µ–Ω—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ.');
      }
      
      console.log(`–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${host}:${port}`);
      
      return res.json({ 
        success: true, 
        message: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
        proxyConfig: {
          host: PROXY_CONFIG.host,
          port: PROXY_CONFIG.port,
          hasAuth: Boolean(PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password)
        }
      });
    } catch (proxyError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç–∞:', proxyError);
      return res.status(500).json({
        error: 'Proxy Agent Error',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç: ' + proxyError.message
      });
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–∫—Å—ñ:', error);
    return res.status(500).json({ 
      error: 'Internal Server Error', 
      message: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–∫—Å—ñ: ' + error.message 
    });
  }
});

// API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–∫—Å—ñ (–±–µ–∑ –ø–∞—Ä–æ–ª—ñ–≤)
app.get('/proxy-info', (req, res) => {
  return res.json({
    host: PROXY_CONFIG.host,
    port: PROXY_CONFIG.port,
    hasAuth: Boolean(PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password)
  });
});

// –î–æ–¥–∞—î–º–æ –∫—ñ–Ω—Ü–µ–≤—É —Ç–æ—á–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–∫—Å—ñ
app.get('/test-proxy', async (req, res) => {
  try {
    if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
      return res.status(400).json({ 
        success: false, 
        message: '–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ' 
      });
    }

    if (!httpsAgent) {
      return res.status(500).json({
        success: false,
        message: '–ü—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ'
      });
    }

    const testUrl = 'https://kahoot.it/reserve/session/';
    console.log(`‚û°Ô∏è –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–æ ${testUrl} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ`);

    const testResponse = await new Promise((resolve, reject) => {
      const https = require('https');
      const options = {
        agent: httpsAgent,
        method: 'GET',
        headers: {
          'User-Agent': 'KahootBot/1.0'
        }
      };

      const proxyReq = https.request(testUrl, options, (proxyRes) => {
        let data = '';
        proxyRes.on('data', (chunk) => { data += chunk; });
        proxyRes.on('end', () => {
          resolve({
            statusCode: proxyRes.statusCode,
            headers: proxyRes.headers,
            data
          });
        });
      });

      proxyReq.on('error', (e) => {
        reject(e);
      });

      proxyReq.end();
    });

    console.log(`‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Kahoot (test-proxy): —Å—Ç–∞—Ç—É—Å ${testResponse.statusCode}`);

    return res.json({
      success: true,
      message: '–ü—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—î',
      testResponse: {
        statusCode: testResponse.statusCode,
        isSuccess: testResponse.statusCode >= 200 && testResponse.statusCode < 300
      }
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ:', error);
    return res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ',
      error: error.message
    });
  }
});


// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Kahoot API
app.use('/kahoot-api', (req, res, next) => {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–æ–∫—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
  if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
    return res.status(503).json({ 
      error: 'Service Unavailable', 
      message: '–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –ø—Ä–æ–∫—Å—ñ —á–µ—Ä–µ–∑ API /set-proxy' 
    });
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π httpsAgent
  if (!httpsAgent) {
    return res.status(503).json({
      error: 'Service Unavailable',
      message: '–ü—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä.'
    });
  }
  
  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ-middleware –¥–∏–Ω–∞–º—ñ—á–Ω–æ
  const proxyMiddleware = createProxyMiddleware({
    target: 'https://kahoot.it',
    changeOrigin: true,
    pathRewrite: {
      '^/kahoot-api': ''
    },
    agent: httpsAgent,
    onProxyReq: (proxyReq, req, res) => {
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
      console.log(`Proxying request to: ${req.method} ${req.path}`);
    },
    onProxyRes: (proxyRes, req, res) => {
      // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ CORS
      proxyRes.headers['Access-Control-Allow-Origin'] = '*';
      proxyRes.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS';
      proxyRes.headers['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
    },
    onError: (err, req, res) => {
      console.error('Proxy error:', err);
      res.status(500).json({ error: 'Proxy Error', message: err.message });
    }
  });
  
  // –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ middleware
  return proxyMiddleware(req, res, next);
});

// API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—ñ—ó –∑ Kahoot
app.get('/kahoot-api/reserve/session/:pin', async (req, res) => {
  try {
    const { pin } = req.params;

    if (!pin || !/^\d{6,10}$/.test(pin)) {
      return res.status(400).json({
        error: 'Invalid PIN',
        message: 'PIN –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 6 –¥–æ 10 —Ü–∏—Ñ—Ä'
      });
    }

    if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
      return res.status(503).json({
        error: 'Proxy Not Configured',
        message: '–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø—Ä–æ–∫—Å—ñ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Kahoot'
      });
    }

    if (!httpsAgent) {
      return res.status(503).json({
        error: 'Service Unavailable',
        message: '–ü—Ä–æ–∫—Å—ñ-–∞–≥–µ–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä.'
      });
    }

    console.log(`–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É —Å–µ—Å—ñ—ó –¥–ª—è PIN: ${pin}`);

    const https = require('https');
    const kahootUrl = `https://kahoot.it/reserve/session/${pin}/`;

    const response = await new Promise((resolve, reject) => {
      const req = https.request(kahootUrl, {
        method: 'GET',
        agent: httpsAgent,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'
        }
      }, (resp) => {
        let data = '';
        resp.on('data', (chunk) => { data += chunk; });
        resp.on('end', () => {
          if (resp.statusCode >= 200 && resp.statusCode < 300) {
            try {
              const parsed = JSON.parse(data);
              resolve(parsed);
            } catch (e) {
              console.error('JSON parse error:', e.message);
              reject({ statusCode: 502, message: `–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${e.message}` });
            }
          } else {
            console.warn(`Kahoot –≤—ñ–¥–ø–æ–≤—ñ–≤ —Å—Ç–∞—Ç—É—Å–æ–º ${resp.statusCode}: ${resp.statusMessage}`);
            reject({ statusCode: resp.statusCode, message: resp.statusMessage });
          }
        });
      });

      req.on('error', (error) => {
        reject({ statusCode: 502, message: error.message });
      });

      req.end();
    });

    console.log(`–û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–∫–µ–Ω —Å–µ—Å—ñ—ó –¥–ª—è PIN ${pin}`);
    return res.json(response);
  } catch (error) {
    const status = error.statusCode || 500;
    console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É —Å–µ—Å—ñ—ó (HTTP ${status}): ${error.message}`);
    return res.status(status).json({
      error: 'Session Token Error',
      message: error.message
    });
  }
});

// –ë–∞–∑–æ–≤–∏–π —Ä–æ—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  res.json({ 
    status: 'Server is running', 
    proxyConfigured: Boolean(PROXY_CONFIG.host && PROXY_CONFIG.port),
    proxyInfo: PROXY_CONFIG.host && PROXY_CONFIG.port ? 
      `${PROXY_CONFIG.host}:${PROXY_CONFIG.port}` : 'Not configured',
    hasAuth: Boolean(PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password),
    timestamp: new Date().toISOString(),
    agentInitialized: httpsAgent !== null
  });
});

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è Render)
app.get('/health', (req, res) => {
  res.status(200).send('OK');
});

// –°—Ç–∞—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ GitHub
app.get('/redirect', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <meta http-equiv="refresh" content="0; url=https://github.com/yourusername/kahoot-bot" />
      <title>Redirecting...</title>
    </head>
    <body>
      <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π...</p>
    </body>
    </html>
  `);
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer(app);

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebSocket –ø—Ä–æ–∫—Å—ñ
const wsServer = new WebSocket.Server({ noServer: true });

// –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è WebSocket
server.on('upgrade', (request, socket, head) => {
  const pathname = url.parse(request.url).pathname;
  
  // –õ–∏—à–µ –¥–ª—è WebSocket –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Kahoot
  if (pathname.startsWith('/kahoot-ws')) {
    wsServer.handleUpgrade(request, socket, head, (ws) => {
      wsServer.emit('connection', ws, request);
    });
  } else {
    socket.destroy();
  }
});

// –û–±—Ä–æ–±–∫–∞ WebSocket –∑'—î–¥–Ω–∞–Ω—å
wsServer.on('connection', (ws, request) => {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–æ–∫—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
  if (!PROXY_CONFIG.host || !PROXY_CONFIG.port) {
    console.error('WebSocket connection attempt, but proxy is not configured');
    ws.send(JSON.stringify({
      error: 'Proxy not configured',
      message: 'Please configure proxy via /set-proxy API first'
    }));
    ws.close();
    return;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π httpsAgent
  if (!httpsAgent) {
    console.error('WebSocket connection attempt, but proxy agent is not initialized');
    ws.send(JSON.stringify({
      error: 'Proxy agent not initialized',
      message: 'Please restart the server'
    }));
    ws.close();
    return;
  }
  
  const kahootPath = request.url.replace('/kahoot-ws', '');
  const kahootWsUrl = `wss://kahoot.it${kahootPath}`;
  
  console.log(`WebSocket connection established, proxying to: ${kahootWsUrl}`);
  
  try {
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ Kahoot
    const kahootWs = new WebSocket(kahootWsUrl, {
      agent: httpsAgent
    });
    
    // –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ Kahoot
    ws.on('message', (message) => {
      try {
        if (kahootWs.readyState === WebSocket.OPEN) {
          // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω)
          // –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ, –ª–æ–≥—É—î–º–æ –ª–∏—à–µ –ø–æ—á–∞—Ç–æ–∫
          const logSize = 200;
          const msgStr = message.toString();
          const logMsg = msgStr.length > logSize ? 
            msgStr.substring(0, logSize) + '...' : msgStr;
          console.log(`WS Client ‚Üí Kahoot: ${logMsg}`);
          
          kahootWs.send(message);
        }
      } catch (error) {
        console.error('Error sending message to Kahoot:', error);
      }
    });
    
    // –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ Kahoot –¥–æ –∫–ª—ñ—î–Ω—Ç–∞
    kahootWs.on('message', (message) => {
      try {
        if (ws.readyState === WebSocket.OPEN) {
          // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
          const logSize = 200;
          const msgStr = message.toString();
          const logMsg = msgStr.length > logSize ? 
            msgStr.substring(0, logSize) + '...' : msgStr;
          console.log(`WS Kahoot ‚Üí Client: ${logMsg}`);
          
          ws.send(message);
        }
      } catch (error) {
        console.error('Error sending message to client:', error);
      }
    });
    
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω—å –ø—Ä–∏ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—ñ –æ–¥–Ω–æ–≥–æ –∑ –Ω–∏—Ö
    ws.on('close', (code, reason) => {
      console.log(`Client WebSocket closed. Code: ${code}, Reason: ${reason || 'None'}`);
      kahootWs.close();
    });
    
    kahootWs.on('close', (code, reason) => {
      console.log(`Kahoot WebSocket closed. Code: ${code}, Reason: ${reason || 'None'}`);
      ws.close();
    });
    
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    ws.on('error', (error) => {
      console.error('Client WebSocket error:', error);
    });
    
    kahootWs.on('error', (error) => {
      console.error('Kahoot WebSocket error:', error);
      try {
        ws.send(JSON.stringify({
          error: 'Kahoot connection error',
          message: error.message
        }));
      } catch (e) {
        console.error('Error sending error message to client:', e);
      }
      ws.close();
    });
  } catch (error) {
    console.error('Error creating WebSocket connection to Kahoot:', error);
    try {
      ws.send(JSON.stringify({
        error: 'WebSocket Error',
        message: error.message
      }));
    } catch (e) {
      console.error('Error sending error message to client:', e);
    }
    ws.close();
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Proxy server running on port ${PORT}`);
  if (PROXY_CONFIG.host && PROXY_CONFIG.port) {
    console.log(`Using proxy: ${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`);
    if (PROXY_CONFIG.auth.username && PROXY_CONFIG.auth.password) {
      console.log('Proxy authentication configured');
    } else {
      console.log('No proxy authentication configured');
    }
  } else {
    console.log('No proxy configured. Please set proxy using /set-proxy API');
  }
});